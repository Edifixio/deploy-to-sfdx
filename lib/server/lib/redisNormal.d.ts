import Redis from 'ioredis';
import { DeleteRequest, deployRequest, poolConfig } from './types';
import { CDS } from './CDS';
declare const cdsExchange = "deployMsg";
declare const deployRequestExchange = "deploys";
declare const orgDeleteExchange = "orgDeletes";
declare const redis: Redis.Redis;
declare const deleteOrg: (username: string) => Promise<void>;
declare const putHerokuCDS: (cds: CDS) => Promise<any>;
declare const getHerokuCDSs: () => Promise<CDS[]>;
declare const getAppNamesFromHerokuCDSs: (salesforceUsername: string, expecting?: boolean) => Promise<string[]>;
declare const getDeleteQueueSize: () => Promise<number>;
declare const getDeleteRequest: () => Promise<DeleteRequest>;
declare const getDeployRequestSize: () => Promise<number>;
declare const getDeployRequest: (log?: boolean) => Promise<deployRequest>;
declare const putDeployRequest: (depReq: deployRequest, log?: boolean) => Promise<void>;
declare const putPoolRequest: (poolReq: deployRequest, log?: boolean) => Promise<void>;
declare const getPoolRequest: (log?: boolean) => Promise<deployRequest>;
declare const cdsDelete: (deployId: string) => Promise<void>;
declare const cdsPublish: (cds: CDS) => Promise<void>;
declare const cdsRetrieve: (deployId: string) => Promise<CDS>;
declare const getKeysForCDSs: () => Promise<string[]>;
declare const getKeys: () => Promise<any[]>;
declare const getPooledOrg: (key: string, log?: boolean) => Promise<CDS>;
declare const putPooledOrg: (depReq: deployRequest, poolMessage: CDS) => Promise<void>;
declare const getPoolDeployRequestQueueSize: () => Promise<number>;
declare const getPoolDeployCountByRepo: (pool: poolConfig) => Promise<any>;
export { redis, deployRequestExchange, getDeployRequest, cdsExchange, cdsPublish, cdsRetrieve, cdsDelete, getDeployRequestSize, putDeployRequest, putPoolRequest, getKeys, getKeysForCDSs, getPooledOrg, putPooledOrg, getPoolRequest, getPoolDeployRequestQueueSize, getPoolDeployCountByRepo, orgDeleteExchange, getDeleteQueueSize, getDeleteRequest, deleteOrg, putHerokuCDS, getAppNamesFromHerokuCDSs, getHerokuCDSs };
